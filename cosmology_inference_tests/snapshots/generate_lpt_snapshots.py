import numpy as np
import scipy

from void_analysis.cosmology_inference import (
    get_D_coefficients,
    get_ic_polynomial_coefficients,
    get_nonperturbative_polynomial_coefficients,
    get_taylor_polynomial_coefficients,
    get_initial_condition_non_perturbative,
    get_initial_condition,
    get_S1r,
    get_S2r,
    get_S3r,
    get_S4r,
    get_S5r,
    get_psi_n_r,
    get_delta_lpt,
    get_eulerian_ratio_from_lagrangian_ratio,
    process_radius,
    spherical_lpt_displacement,
    spherical_lpt_velocity,
    void_los_velocity_ratio_1lpt,
    void_los_velocity_ratio_derivative_1lpt,
    void_los_velocity_ratio_semi_analytic,
    void_los_velocity_ratio_derivative_semi_analytic,
    semi_analytic_model,
    Delta_theta,
    V_theta,
    get_upper_bound,
    invert_Delta_theta_scalar,
    theta_of_Delta
)

from void_analysis.simulation_tools import gaussian_delta, gaussian_Delta
from void_analysis import tools

# List of snapshots generated by this script
GENERATED_SNAPSHOTS = [
    "D_coefficients.npy",
    "A_poly_coefficients.npy",
    "B_poly_coefficients.npy",
    "Bp_poly_coefficients.npy",
    "NonPert_initial_conditions.npy",
    "Pert_initial_conditions.npy",
    "S1r_data.npy",
    "S2r_data.npy",
    "S3r_data.npy",
    "S4r_data.npy",
    "S5r_data.npy",
    "psi_n_r.npy",
    "Delta_lpt.npy",
    "eulerian_ratio_data.npz",
    "lpt_displacement.npy",
    "lpt_velocity.npy",
    "test_void_los_velocity_ratio_1lpt.npy",
    "test_void_los_velocity_ratio_derivative_1lpt.npy",
    "test_void_los_velocity_ratio_semi_analytic.npy",
    "test_void_los_velocity_ratio_derivative_semi_analytic.npy",
    "semi_analytic_model_ref.npy",
    "Delta_theta_ref.npy",
    "V_theta_ref.npy",
    "get_upper_bound_ref.npy",
    "invert_Delta_theta_scalar_ref.npy",
    "theta_of_Delta_ref.npy"
]



def generate_snapshots():
    # Test data:
    Om = 0.3
    rvals = np.linspace(0,3,101)
    A = 0.85
    sigma = 1
    f1 = 0.53
    delta_f = lambda r: gaussian_delta(r,A=A,sigma=sigma)
    Delta_f = lambda r: gaussian_Delta(r,A=A,sigma=sigma)
    Delta = delta_f(rvals)
    Psi_n = [0.5**n*np.exp(-rvals**2/(2*n**2)) for n in range(1,6)]

    # Generate snapshots
    D_coeffs = get_D_coefficients(Om,order=5,return_all=True)
    A_coeffs = get_ic_polynomial_coefficients(5,Om=0.3)
    B_coeffs = get_nonperturbative_polynomial_coefficients(5,Om=0.3)
    Bp_coeffs = get_taylor_polynomial_coefficients(5,Om=0.3)
    nonpert_ics = get_initial_condition_non_perturbative(
        Delta,order=5,Om=0.3,use_linear_on_fail=False,
        taylor_expand = False,
    )
    pert_ics = get_initial_condition(
        Delta,order=4,Om=0.3,use_linear_on_fail=False
    )
    S1r = get_S1r(
        Delta,rvals,0.3,order=5,perturbative_ics = False,
        taylor_expand=False,force_linear_ics = False
    )
    S2r = get_S2r(
        Delta,rvals,0.3,order=5,perturbative_ics = False,
        taylor_expand=False,force_linear_ics = False
    )
    S3r = get_S3r(
        Delta,rvals,0.3,order=5,perturbative_ics = False,
        taylor_expand=False,force_linear_ics = False
    )
    S4r = get_S4r(
        Delta,rvals,0.3,order=5,perturbative_ics = False,
        taylor_expand=False,force_linear_ics = False
    )
    S5r = get_S5r(
        Delta,rvals,0.3,order=5,perturbative_ics = False,
        taylor_expand=False,force_linear_ics = False
    )
    psi_n_r = get_psi_n_r(
        Delta,rvals,5,z=0,Om=0.3,order=5,return_all=True
    )
    Delta_lpt = get_delta_lpt(
        Delta,z=0,Om=0.3,order=5,return_all=True
    )
    fully_expanded = get_eulerian_ratio_from_lagrangian_ratio(
        Psi_n,Psi_n,5,expand_denom_only=False
    )
    denom_only = get_eulerian_ratio_from_lagrangian_ratio(
        np.sum(Psi_n,0),Psi_n,5,expand_denom_only=True
    )
    psi_lpt = spherical_lpt_displacement(
        rvals,Delta,order=5,z=0,Om=0.3,
        fixed_delta = True,
        radial_fraction = True,eulerian_radius=False,
        expand_denom_only=False,taylor_expand=False,
        expand_euler_ratio=False
    )
    v_lpt = spherical_lpt_velocity(
        rvals,Delta,order=5,z=0,Om=0.3,radial_fraction = True,
        fixed_delta = True,eulerian_radius=False,
        taylor_expand=False,expand_denom_only=False,
        expand_euler_ratio=False,return_all=False
    )
    
    vlpt_ratio = void_los_velocity_ratio_1lpt(rvals,Delta_f,f1)
    vlpt_deriv = void_los_velocity_ratio_derivative_1lpt(
        rvals,Delta_f,delta_f,f1
    )

    np.save("D_coefficients.npy", D_coeffs)
    np.save("A_poly_coefficients.npy",A_coeffs)
    np.save("B_poly_coefficients.npy",B_coeffs)
    np.save("Bp_poly_coefficients.npy",Bp_coeffs)
    np.save("NonPert_initial_conditions.npy",nonpert_ics)
    np.save("Pert_initial_conditions.npy",pert_ics)
    np.save("S1r_data.npy",S1r)
    np.save("S2r_data.npy",S2r)
    np.save("S3r_data.npy",S3r)
    np.save("S4r_data.npy",S4r)
    np.save("S5r_data.npy",S5r)
    np.save("psi_n_r.npy",psi_n_r)
    np.save("Delta_lpt.npy",Delta_lpt)
    np.savez(
        "eulerian_ratio_data.npz",fully_expanded=fully_expanded,
        denom_only=denom_only
    )
    np.save("lpt_displacement.npy",psi_lpt)
    np.save("lpt_velocity.npy",v_lpt)
    np.save("test_void_los_velocity_ratio_1lpt.npy",vlpt_ratio)
    np.save("test_void_los_velocity_ratio_derivative_1lpt.npy",vlpt_deriv)
    
    # New method for generating regression test data consistently:
    tools.generate_regression_test_data(
        void_los_velocity_ratio_semi_analytic,
        "test_void_los_velocity_ratio_semi_analytic.npy",
        rvals,Delta_f,f1,params = [-0.5,0.1]
    )
    tools.generate_regression_test_data(
        void_los_velocity_ratio_derivative_semi_analytic,
        "test_void_los_velocity_ratio_derivative_semi_analytic.npy",
        rvals,Delta_f,delta_f,f1,params = [-0.5,0.1]
    )
    
    # semi_analytic_model
    u = 1 - np.cbrt(1 + Delta)
    alphas = [-0.5,0.1]
    tools.generate_regression_test_data(
        semi_analytic_model,
        "semi_analytic_model_ref.npy",
        u,alphas,z=0,Om=0.3111,f1=0.53,h=1,nf1 = 5/9
    )
    # Delta_theta:
    theta = np.linspace(0,10,101)
    tools.generate_regression_test_data(
        Delta_theta,
        "Delta_theta_ref.npy",
        theta
    )
    # V_theta:
    theta = np.linspace(0,10,101)
    tools.generate_regression_test_data(
        V_theta,
        "V_theta_ref.npy",
        theta
    )
    # get_upper_bound
    tools.generate_regression_test_data(
        get_upper_bound,
        "get_upper_bound_ref.npy",
        -0.85
    )
    # invert_Delta_theta_scalar
    Delta = -0.85
    tools.generate_regression_test_data(
        invert_Delta_theta_scalar,
        "invert_Delta_theta_scalar_ref.npy",
        -0.85
    )
    # theta_of_Delta
    Delta = np.linspace(0,-1,21)
    tools.generate_regression_test_data(
        theta_of_Delta,
        "theta_of_Delta_ref.npy",
        Delta
    )

    print("âœ… LPT snapshots saved!")

if __name__ == "__main__":
    generate_snapshots()
